{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\parve\\\\Desktop\\\\job portal cod\\\\job-portal-react-main\\\\src\\\\components\\\\employer\\\\ViewCandidates.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { viewAppliedJobFromServer, viewUserFromServer } from \"../../Backend/sendRequestToServer\";\nimport { useAuth } from \"../../contexts/AuthContext\"; //components\n\nimport Candidates from \"./Candidates\";\nimport Navbar from \"./Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ViewCandidates() {\n  _s();\n\n  const {\n    currentUser\n  } = useAuth();\n  const [appliedjobList, setappliedJobList] = useState(\"\");\n  useEffect(() => {\n    getAppliedJobs();\n  }, []);\n\n  async function getAppliedJobs() {\n    let users = {};\n    const res = await viewUserFromServer();\n\n    if (res.status === 200) {\n      for (let user of res.result) {\n        var _user$resumeUrl;\n\n        users[user.emailId] = (_user$resumeUrl = user.resumeUrl) !== null && _user$resumeUrl !== void 0 ? _user$resumeUrl : \"\";\n      }\n\n      console.log(res.result);\n    }\n\n    let jobList = await viewAppliedJobFromServer();\n\n    if (jobList.status === 200) {\n      let tempJobs = [];\n\n      for (let job of jobList.result) {\n        var _users$job$email;\n\n        job.resumeUrl = (_users$job$email = users[job.email]) !== null && _users$job$email !== void 0 ? _users$job$email : \"\";\n        tempJobs.push(job);\n      }\n\n      if (currentUser.role === \"Super Admin\") setappliedJobList(tempJobs);else setappliedJobList(tempJobs.filter(job => job.employerEmail === currentUser.emailId));\n    }\n  }\n\n  console.log(appliedjobList);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container p-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mt-3 mb-2 text-center\",\n        children: \"View Applied Candidates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row m-0\",\n        children: appliedjobList ? appliedjobList.map((appliedjob, index) => /*#__PURE__*/_jsxDEV(Candidates, {\n          appliedjob: appliedjob\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)) : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ViewCandidates, \"gs4vlFQNxAAwMgHR8SkLE3kI+9I=\", false, function () {\n  return [useAuth];\n});\n\n_c = ViewCandidates;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewCandidates\");","map":{"version":3,"sources":["C:/Users/parve/Desktop/job portal cod/job-portal-react-main/src/components/employer/ViewCandidates.jsx"],"names":["React","useState","useEffect","viewAppliedJobFromServer","viewUserFromServer","useAuth","Candidates","Navbar","ViewCandidates","currentUser","appliedjobList","setappliedJobList","getAppliedJobs","users","res","status","user","result","emailId","resumeUrl","console","log","jobList","tempJobs","job","email","push","role","filter","employerEmail","map","appliedjob","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,wBADF,EAEEC,kBAFF,QAGO,mCAHP;AAIA,SAASC,OAAT,QAAwB,4BAAxB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAkBJ,OAAO,EAA/B;AAEA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,EAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,cAAf,GAAgC;AAC9B,QAAIC,KAAK,GAAG,EAAZ;AACA,UAAMC,GAAG,GAAG,MAAMV,kBAAkB,EAApC;;AACA,QAAIU,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,WAAK,IAAIC,IAAT,IAAiBF,GAAG,CAACG,MAArB,EAA6B;AAAA;;AAC3BJ,QAAAA,KAAK,CAACG,IAAI,CAACE,OAAN,CAAL,sBAAsBF,IAAI,CAACG,SAA3B,6DAAwC,EAAxC;AACD;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACG,MAAhB;AACD;;AAED,QAAIK,OAAO,GAAG,MAAMnB,wBAAwB,EAA5C;;AAEA,QAAImB,OAAO,CAACP,MAAR,KAAmB,GAAvB,EAA4B;AAC1B,UAAIQ,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIC,GAAT,IAAgBF,OAAO,CAACL,MAAxB,EAAgC;AAAA;;AAC9BO,QAAAA,GAAG,CAACL,SAAJ,uBAAgBN,KAAK,CAACW,GAAG,CAACC,KAAL,CAArB,+DAAoC,EAApC;AACAF,QAAAA,QAAQ,CAACG,IAAT,CAAcF,GAAd;AACD;;AACD,UAAIf,WAAW,CAACkB,IAAZ,KAAqB,aAAzB,EAAwChB,iBAAiB,CAACY,QAAD,CAAjB,CAAxC,KAEEZ,iBAAiB,CACfY,QAAQ,CAACK,MAAT,CAAiBJ,GAAD,IAASA,GAAG,CAACK,aAAJ,KAAsBpB,WAAW,CAACS,OAA3D,CADe,CAAjB;AAGH;AACF;;AAEDE,EAAAA,OAAO,CAACC,GAAR,CAAYX,cAAZ;AAEA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,uBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EACqE,GADrE,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,kBACGA,cAAc,GACXA,cAAc,CAACoB,GAAf,CAAmB,CAACC,UAAD,EAAaC,KAAb,kBACjB,QAAC,UAAD;AAAY,UAAA,UAAU,EAAED;AAAxB,WAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA,gBADF,CADW,GAIX;AALN;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAgBD;;GArDuBxB,c;UACEH,O;;;KADFG,c","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  viewAppliedJobFromServer,\n  viewUserFromServer,\n} from \"../../Backend/sendRequestToServer\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\n//components\nimport Candidates from \"./Candidates\";\nimport Navbar from \"./Navbar\";\n\nexport default function ViewCandidates() {\n  const { currentUser } = useAuth();\n\n  const [appliedjobList, setappliedJobList] = useState(\"\");\n\n  useEffect(() => {\n    getAppliedJobs();\n  }, []);\n\n  async function getAppliedJobs() {\n    let users = {};\n    const res = await viewUserFromServer();\n    if (res.status === 200) {\n      for (let user of res.result) {\n        users[user.emailId] = user.resumeUrl ?? \"\";\n      }\n      console.log(res.result);\n    }\n\n    let jobList = await viewAppliedJobFromServer();\n\n    if (jobList.status === 200) {\n      let tempJobs = [];\n      for (let job of jobList.result) {\n        job.resumeUrl = users[job.email] ?? \"\";\n        tempJobs.push(job);\n      }\n      if (currentUser.role === \"Super Admin\") setappliedJobList(tempJobs);\n      else\n        setappliedJobList(\n          tempJobs.filter((job) => job.employerEmail === currentUser.emailId)\n        );\n    }\n  }\n\n  console.log(appliedjobList);\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"container p-3\">\n        <h3 className=\"mt-3 mb-2 text-center\">View Applied Candidates</h3>{\" \"}\n        <br />\n        <div className=\"row m-0\">\n          {appliedjobList\n            ? appliedjobList.map((appliedjob, index) => (\n                <Candidates appliedjob={appliedjob} key={index} />\n              ))\n            : \"\"}\n        </div>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}